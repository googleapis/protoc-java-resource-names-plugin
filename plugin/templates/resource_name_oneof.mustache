/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package {{package}};

import com.google.common.base.Preconditions;
import {{resourceNameGlobalPackageName}}.ResourceName;
import {{resourceNameGlobalPackageName}}.ResourceNameType;
{{#resourceTypes}}
import {{resourcePackage}}.{{resourceTypeClassName}};
{{/resourceTypes}}
import {{resourceNameGlobalPackageName}}.UntypedResourceName;
import java.io.IOException;

// AUTO-GENERATED DOCUMENTATION AND CLASS
@javax.annotation.Generated("by GAPIC protoc plugin")
public class {{className}} implements ResourceName {

  private final ResourceName resourceName;

  {{#resourceTypes}}
  public {{resourceTypeClassName}} get{{resourceTypeClassName}}() {
    if (resourceName instanceof {{resourceTypeClassName}}) {
      return ({{resourceTypeClassName}}) resourceName;
    } else {
      return null;
    }
  }
  {{/resourceTypes}}

  public UntypedResourceName getUntypedResourceName() {
    if (resourceName instanceof UntypedResourceName) {
      return (UntypedResourceName) resourceName;
    } else {
      return null;
    }
  }

  public ResourceName getResourceName() {
    return resourceName;
  }

  @Override
  public ResourceNameType getType() {
    return getResourceName().getType();
  }

  private {{className}}(ResourceName resourceName) {
    this.resourceName = Preconditions.checkNotNull(resourceName);
  }

  public static {{className}} parse(String resourceNameString) {
    {{#singleResourceTypes}}
    if ({{resourceTypeClassName}}.isParsableFrom(resourceNameString)) {
      return new {{className}}({{resourceTypeClassName}}.parse(resourceNameString));
    }
    {{/singleResourceTypes}}
    {{#fixedResourceTypes}}
    if ({{resourceTypeClassName}}.matches(resourceNameString)) {
      return new {{className}}({{resourceTypeClassName}}.instance());
    }
    {{/fixedResourceTypes}}
    return new {{className}}(UntypedResourceName.parse(resourceNameString));
  }

  {{#resourceTypes}}
  public static {{className}} from({{resourceTypeClassName}} {{resourceTypeVarName}}) {
    return new {{className}}({{resourceTypeVarName}});
  }
  {{/resourceTypes}}

  public static {{className}} fromUntyped(UntypedResourceName untypedResourceName) {
    return new {{className}}(untypedResourceName);
  }

  @Override
  public String toString() {
    return getResourceName().toString();
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof {{className}}) {
      {{className}} that = ({{className}}) o;
      return resourceName.equals(that.resourceName);
    }
    return false;
  }

  @Override
  public int hashCode() {
    return resourceName.hashCode();
  }
}

