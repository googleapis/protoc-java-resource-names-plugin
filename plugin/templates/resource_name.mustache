/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package {{package}};

import com.google.common.base.Preconditions;
import com.google.api.pathtemplate.PathTemplate;
import {{resourceNameGlobalPackageName}}.ResourceName;
import {{resourceNameGlobalPackageName}}.ResourceNameType;
import java.io.IOException;
import java.util.Map;

// AUTO-GENERATED DOCUMENTATION AND CLASS
@javax.annotation.Generated("by GAPIC protoc plugin")
public class {{className}} implements ResourceName {

  private static final PathTemplate PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("{{formatString}}");

  {{#formatFields}}
  private final String {{lower}};
  {{/formatFields}}

  {{#formatFields}}
  public String get{{upper}}() {
    return {{lower}};
  }

  {{/formatFields}}
  public static Builder newBuilder() {
    return new Builder();
  }

  public Builder toBuilder() {
    return new Builder(this);
  }

  private {{className}}(Builder builder) {
    {{#formatFields}}
    {{lower}} = Preconditions.checkNotNull(builder.get{{upper}}());
    {{/formatFields}}
  }

  public static {{className}} create({{#parameterList}}String {{parameter}}{{#not_last}}, {{/not_last}}{{/parameterList}}) {
    return newBuilder(){{#formatFields}}
      .set{{upper}}({{lower}}){{/formatFields}}
      .build();
  }

  public static {{className}} parse(String formattedString) {
    Map<String, String> matchMap =
        PATH_TEMPLATE.validatedMatch(formattedString, "{{className}}.parse: formattedString not in valid format");
    return create({{#parameterList}}matchMap.get("{{parameter_name}}"){{#not_last}}, {{/not_last}}{{/parameterList}});
  }

  public static boolean isParsableFrom(String formattedString) {
    return PATH_TEMPLATE.matches(formattedString);
  }

  @Override
  public ResourceNameType getType() {
    return {{typeNameUpper}}.instance();
  }

  @Override
  public String toString() {
    return PATH_TEMPLATE.instantiate({{#parameterList}}"{{parameter_name}}", {{parameter}}{{#not_last}}, {{/not_last}}{{/parameterList}});
  }

  /** Builder for {{className}}. */
  public static class Builder {

    {{#formatFields}}
    private String {{lower}};
    {{/formatFields}}

    {{#formatFields}}
    public String get{{upper}}() {
      return {{lower}};
    }

    {{/formatFields}}
    {{#formatFields}}
    public Builder set{{upper}}(String {{lower}}) {
      this.{{lower}} = {{lower}};
      return this;
    }

    {{/formatFields}}
    private Builder() {
    }

    private Builder({{className}} {{varName}}) {
      {{#formatFields}}
      {{lower}} = {{varName}}.{{lower}};
      {{/formatFields}}
    }

    public {{className}} build() {
      return new {{className}}(this);
    }
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof {{className}}) {
      {{className}} that = ({{className}}) o;
      return {{#parameterList}}{{#not_first}}
          && {{/not_first}}(this.{{parameter}}.equals(that.{{parameter}})){{/parameterList}};
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    {{#parameterList}}
    h *= 1000003;
    h ^= {{parameter}}.hashCode();
    {{/parameterList}}
    return h;
  }
}

