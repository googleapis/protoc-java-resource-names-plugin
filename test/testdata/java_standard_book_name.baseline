/*
 * Copyright 2016, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package sandbox.resourcenames.types;

import com.google.api.pathtemplate.PathTemplate;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import sandbox.resourcenames.global.ResourceName;
import sandbox.resourcenames.global.ResourceNameType;

public class StandardBookName implements ResourceName {

  private static final PathTemplate PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/shelf_id/books/book_id");

  private final String shelfId;
  private final String bookId;

  public String getShelfId() {
    return shelfId;
  }

  public String getBookId() {
    return bookId;
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public Builder toBuilder() {
    return new Builder(this);
  }
  
  private StandardBookName(Builder builder) {
    this.shelfId = Preconditions.checkNotNull(builder.getShelfId());
    this.bookId = Preconditions.checkNotNull(builder.getBookId());
  }

  public static StandardBookName create(String shelfId, String bookId) {
    return newBuilder().setShelfId(shelfId).setBookId(bookId).build();
  }
  
  public static StandardBookName parse(String formattedString) {
    ImmutableMap<String, String> matchMap =
        PATH_TEMPLATE.validatedMatch(formattedString, "Error in StandardBookName.parse");
    return create(matchMap.get("shelf_id"), matchMap.get("book_id"));
  }
  
  public static boolean isParsableFrom(String formattedString) {
    return PATH_TEMPLATE.matches(formattedString);
  }
  
  @Override
  public ResourceNameType getType() {
    return StandardBookNameType.instance();
  }
  
  @Override
  public String toString() {
    return PATH_TEMPLATE.instantiate("shelf_id", shelfId, "book_id", bookId);
  }
  
  public static class Builder {
    private String shelfId;
    private String bookId;

    public String getShelfId() {
      return shelfId;
    }

    public String getBookId() {
      return bookId;
    }

    public Builder setShelfId(String shelfId) {
      this.shelfId = shelfId;
      return this;
    }

    public Builder setBookId(String bookId) {
      this.bookId = bookId;
      return this;
    }

    private Builder() {}
    
    private Builder(StandardBookName standardBookName) {
      this.shelfId = standardBookName.shelfId;
      this.bookId = standardBookName.bookId;
    }

    public StandardBookName build() {
      return new StandardBookName(this);
    }
  }
  
  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof StandardBookName) {
      StandardBookName that = (StandardBookName) o;
      return (this.shelfId.equals(that.shelfId))
        && (this.bookId.equals(that.bookId));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= shelfId.hashCode();
    h *= 1000003;
    h ^= bookId.hashCode();
    return h;
  }
}

