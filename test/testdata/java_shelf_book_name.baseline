/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.example.library.v1;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.google.api.pathtemplate.PathTemplate;
import com.google.api.resourcenames.ResourceName;
import com.google.api.resourcenames.ResourceNameType;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

// AUTO-GENERATED DOCUMENTATION AND CLASS
@javax.annotation.Generated("by GAPIC protoc plugin")
public class ShelfBookName extends BookName {

  private static final PathTemplate PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf_id}/books/{book_id}");

  private volatile Map<String, String> fieldMap;

  private final String shelfId;
  private final String bookId;

  public String getShelfId() {
    return shelfId;
  }

  public String getBookId() {
    return bookId;
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public Builder toBuilder() {
    return new Builder(this);
  }

  private ShelfBookName(Builder builder) {
    shelfId = Preconditions.checkNotNull(builder.getShelfId());
    bookId = Preconditions.checkNotNull(builder.getBookId());
  }

  public static ShelfBookName of(String shelfId, String bookId) {
    return newBuilder()
      .setShelfId(shelfId)
      .setBookId(bookId)
      .build();
  }

  public static String format(String shelfId, String bookId) {
    return newBuilder()
      .setShelfId(shelfId)
      .setBookId(bookId)
      .build()
      .toString();
  }

  public static ShelfBookName parse(String formattedString) {
    if (formattedString.isEmpty()) {
      return null;
    }
    Map<String, String> matchMap =
        PATH_TEMPLATE.validatedMatch(formattedString, "ShelfBookName.parse: formattedString not in valid format");
    return of(matchMap.get("shelf_id"), matchMap.get("book_id"));
  }

  public static List<ShelfBookName> parseList(List<String> formattedStrings) {
    List<ShelfBookName> list = new ArrayList<>(formattedStrings.size());
    for (String formattedString : formattedStrings) {
      list.add(parse(formattedString));
    }
    return list;
  }

  public static List<String> toStringList(List<ShelfBookName> values) {
    List<String> list = new ArrayList<String>(values.size());
    for (ShelfBookName value : values) {
      if (value == null) {
        list.add("");
      } else {
        list.add(value.toString());
      }
    }
    return list;
  }

  public static boolean isParsableFrom(String formattedString) {
    return PATH_TEMPLATE.matches(formattedString);
  }

  public Map<String, String> getFieldValuesMap() {
    if (fieldMap != null) {
      return fieldMap;
    }
    ImmutableMap.Builder<String, String> fieldMapBuilder = ImmutableMap.builder();
    fieldMapBuilder.put("shelfId", shelfId);
    fieldMapBuilder.put("bookId", bookId);

    fieldMap = fieldMapBuilder.build();
    return fieldMap;
  }

  public String getFieldValue(String fieldName) {
    return fieldMap.get(fieldName);
  }

  /**
   * @deprecated This method is only present to satisfy the ResourceName interface.
   */
  @Deprecated
  public ResourceNameType getType() {
    throw new UnsupportedOperationException("ShelfBookName.getType() not supported");
  }

  @Override
  public String toString() {
    return PATH_TEMPLATE.instantiate("shelf_id", shelfId, "book_id", bookId);
  }

  /** Builder for ShelfBookName. */
  public static class Builder {

    private String shelfId;
    private String bookId;

    public String getShelfId() {
      return shelfId;
    }

    public String getBookId() {
      return bookId;
    }

    public Builder setShelfId(String shelfId) {
      this.shelfId = shelfId;
      return this;
    }

    public Builder setBookId(String bookId) {
      this.bookId = bookId;
      return this;
    }

    private Builder() {
    }

    private Builder(ShelfBookName shelfBookName) {
      shelfId = shelfBookName.shelfId;
      bookId = shelfBookName.bookId;
    }

    public ShelfBookName build() {
      return new ShelfBookName(this);
    }
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ShelfBookName) {
      ShelfBookName that = (ShelfBookName) o;
      return (this.shelfId.equals(that.shelfId))
          && (this.bookId.equals(that.bookId));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= shelfId.hashCode();
    h *= 1000003;
    h ^= bookId.hashCode();
    return h;
  }
}

